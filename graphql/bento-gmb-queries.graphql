type GroupCount {
    group: String
    subjects: Int
}

type FileUUID {
    file_id: String
}

type SubjectOverview {
    subject_id: String
    race: String
    diseaseTerm: String
    registeringInstitution: String
    patientSubgroup: String
    stageAtEntry: String
    causeOfDeath: String
    sitesOfDiseaseAtAutopsy: String
    sourceOfTheLabData: String
    labTest: String
    systemOrganClass: String
    serious: String
    outcome: String
    pathogenicity: String
    germlinePathogenicity: String
    files: [FileUUID]
}

type FileOverview {
    file_id: String
    file_name: String
    file_description: String
    file_format: String
    file_size: Int
    trial_id: String
    trial_short_name: String
    arm: String
    subject_id: String
    file_type: String
    md5sum: String
}

type SearchResult {
    numberOfTrials: Int
    numberOfSubjects: Int
    numberOfFiles: Int
    fileIds: [String]
    subject_ids: [String]
}

type SubjectDetail {
    subject_id: String
    gender: String
    ageAtEntry: Int
    race: String
    registeringInstitution: String
    diseaseTerm: String
    patientSubgroup: String
    files: [FileOverview]
    enrollments: [Enrollment]
    adverseEvents: [AdverseEvent]
    somaticVariant: [SomaticVariant]
    germlineVariant: [GermlineVariant]
}

type Enrollment {
    dateOfDiagnosis: String
    histology: String
    eligibility: String
    gleasonScore: String
    consentSignedDate: String
    consentVersionDate: String
    stageAtEntry: String
    labsInclusionStartDate: String
}

type AdverseEvent {
    course: String
    courseDay: String
    onsetDate: String
    resolvedDate: String
    term: String
    organClass: String
    eventDescription: String
    grade: String
    researchAttribution: String
    diseaseAttriibution: String
    otherAttribution: String
    otherExtra: String
    unexpectedAdverseEvents: String
    serious: String
    action: String
    therapy: String
    outcome: String
    expeditedReportToIRB: String
    expeditedReportToCCR: String
}

type SomaticVariant {
    genePanel500: String
    genePathogenicVariant: String
    somaticPathogenicity: String
}

type GermlineVariant {
    panelCode: String
    genePathogenicVariant: String
    germlinePathogenicity: String
}

type TrialInfo {
    trialName: String
    trial_id: String
    trialDescription: String
    trialType: String
    num_subjects: Int
}

type SiteSubjectCount{
    site_id: String
    siteName: String
    siteAddress: String
    siteStatus: String
    subjectCount: Int
}

type TrialDetail{
    trial_id: String
    trialName: String
    trialLongName: String
    trialDesription: String
    leadOrganization: String
    trialType: String
    trialPrincipalInvestigator: String
    num_subjects: Int,
    num_files: Int,
    sites: [SiteSubjectCount]
}

type SiteDetail{
    site_id: String
    siteName: String
    siteAddress: String
    siteContact: String
    sitePhone: String
    siteEmail: String
    siteStatus: String
    num_subjects: Int
    num_files: Int
    subjects: [SubjectDetail]
    files: [FileOverview]
}

schema {
    query: QueryType
}

type QueryType {
    schemaVersion: String @cypher(statement: "RETURN '0.8.0'")

    subjectDetail(subject_id: String): SubjectDetail @cypher(statement: """
        MATCH (s:SUBJECT {PT_ID: $subject_id})
        OPTIONAL MATCH (s)<--(f:FILE)
        OPTIONAL MATCH (s)<--(e:ENROLLMENT)
        OPTIONAL MATCH (s)<--(ae:ADVERSE_EVENTS)
        OPTIONAL MATCH (s)<--(sv:SOMATIC_VARIANT)
        OPTIONAL MATCH (s)<--(gv:GERMLINE_VARIANT)
        WITH s,
            COLLECT(DISTINCT f {
                subject_id: COALESCE(s.PT_ID, ""),
                file_name: COALESCE(f.FILE_NAME, ""),
                file_type: COALESCE(f.FILE_TYPE, ""),
                file_description: COALESCE(f.FILE_DESCRIPTION, ""),
                file_format: COALESCE(f.FILE_FORMAT, ""),
                file_size: COALESCE(f.FILE_SIZE, ""),
                file_id: COALESCE(f.UUID, ""),
                md5sum: COALESCE(f.MD5SUM, "")
            }) AS files,
            COLLECT(DISTINCT e {
                dateOfDiagnosis: COALESCE(e.DX_DT, ""),
                histology: COALESCE(e.HIST_CYTPATH_DESC, ""),
                eligibility: COALESCE(e.PT_ELIG_IND, ""),
                gleasonScore: COALESCE(e.GLESNSC_GD_PRSCA_VAL, ""),
                consentSignedDate: COALESCE(e.ICF_SIG_DT, ""),
                consentVersionDate: COALESCE(e.PROT_AMDT_DT, ""),
                stageAtEntry: COALESCE(e.DISEAS_STG, ""),
                labsInclusionStartDate: COALESCE(e.PRESTUDY_LAB_DT, "")
            }) AS enrollments,
            COLLECT(DISTINCT ae {
                course: COALESCE(ae.CRSE_NUM, ""),
                courseDay: COALESCE(ae.CRSE_DAY_NUM, ""),
                onsetDate: COALESCE(ae.AE_ONSET_DT, ""),
                resolvedDate: COALESCE(ae.RESOLV_DT, ""),
                term: COALESCE(ae.CTCAE5_LLT_NM, ""),
                organClass: COALESCE(ae.MEDDRA_SOC_TRM_NM, ""),
                eventDescription: COALESCE(ae.AE_DESC_TXT, ""),
                grade: COALESCE(ae.AE_SEV_GD, ""),
                researchAttribution: COALESCE(ae.AE_RESRCH_ATRB_CAT, ""),
                diseaseAttriibution: COALESCE(ae.AE_DZ_ATRB_CAT, ""),
                otherAttribution: COALESCE(ae.AE_OTH_COND_ATRB_CAT, ""),
                otherExtra: COALESCE(ae.OTX_AE_SHORT_TXT, ""),
                unexpectedAdverseEvents: COALESCE(ae.UNEXP_AE_OCC_CD_IND, ""),
                serious: COALESCE(ae.SAE_RSN, ""),
                action: COALESCE(ae.AE_ACTION, ""),
                therapy: COALESCE(ae.AE_THERAPY, ""),
                outcome: COALESCE(ae.AE_OUTCOME, ""),
                expeditedReportToIRB: COALESCE(ae.AER_IND, ""),
                expeditedReportToCCR: COALESCE(ae.CCR_EP_AE_SUBM_IND, "")
            }) AS adverseEvents,
            COLLECT(DISTINCT sv {
                genePanel500: COALESCE(sv.TUMR_GENE_SEQ_TSO_CD, ""),
                genePathogenicVariant: COALESCE(sv.GENE_PATH_VAR_NM, ""),
                somaticPathogenicity: COALESCE(sv.SOMATIC_VAR_PTHGNC_CAT, "")
            }) AS somaticVariant,
            COLLECT(DISTINCT gv {
                panelCode: COALESCE(gv.HERED_GENE_PANL_CD, ""),
                genePathogenicVariant: COALESCE(gv.GENE_PATH_VAR_NM, ""),
                germlinePathogenicity: COALESCE(gv.GRMLN_VAR_PTHGNC_CAT, "")
            }) AS germlineVariant
        RETURN {
            subject_id: COALESCE(s.PT_ID, ""),
            gender: COALESCE(s.PRSN_GENDER_TXT_TP, ""),
            ageAtEntry: COALESCE(s.PT_AGE_VAL, 0),
            race: COALESCE(s.PT_RACE_CD_1, ""),
            registeringInstitution: COALESCE(s.REG_INST_ID_CD, ""),
            diseaseTerm: COALESCE(s.DZ_DX_NM, ""),
            patientSubgroup: COALESCE(s.PT_SUBGRP_ASSIGN_TP, ""),
            files: files,
            enrollments: enrollments,
            adverseEvents: adverseEvents,
            somaticVariant: somaticVariant,
            germlineVariant: germlineVariant
        }
    """, passThrough: true)

    trialsInfo: [TrialInfo] @cypher(statement: """
        MATCH (ct:CLINICALTRIAL)
        OPTIONAL MATCH (ct)<--(s:SUBJECT)
        RETURN {
            trialName: COALESCE(ct.CLINICAL_TRIAL_SHORT_NAME, ""),
            trial_id: COALESCE(ct.CLINICAL_TRIAL_ID, ""),
            trialDescription: COALESCE(ct.CLINICAL_TRIAL_DESCRIPTION, ""),
            trialType: COALESCE(ct.CLINICAL_TRIAL_TYPE, ""),
            num_subjects: COUNT(s.PT_ID)
        }
    """, passThrough: true)

    trialDetail(trial_id: String): TrialDetail @cypher(statement: """
        MATCH (ct:CLINICALTRIAL {CLINICAL_TRIAL_ID: $trial_id}) 
        OPTIONAL MATCH (ct)<--(site:SITE)<--(s:SUBJECT)<--(f:FILE)
        WITH 
            COUNT(DISTINCT s) AS num_subjects, 
            COUNT(DISTINCT f) as num_files
        MATCH (ct:CLINICALTRIAL {CLINICAL_TRIAL_ID: $trial_id}) 
        OPTIONAL MATCH (ct)<--(site:SITE)<--(s:SUBJECT)
        WITH num_subjects, num_files, ct, site, 
            COUNT(DISTINCT s) AS num_site_subjects
        WITH num_subjects, num_files, ct,
            COLLECT(DISTINCT site {
                site_id: COALESCE(site.REG_INST_ID, ""),
                siteName: COALESCE(site.REG_INST_ID_CD, ""),
                siteAddress: COALESCE(site.LOCATION, ""),
                siteStatus: COALESCE(site.STATUS, ""),
                subjectCount: num_site_subjects
            }) AS sites
        RETURN {
            trial_id: COALESCE(ct.CLINICAL_TRIAL_ID, ""),
            trialName: COALESCE(ct.CLINICAL_TRIAL_SHORT_NAME, ""),
            trialLongName: COALESCE(ct.CLINICAL_TRIAL_LONG_NAME, ""),
            trialDesription: COALESCE(ct.CLINICAL_TRIAL_DESCRIPTION, ""),
            leadOrganization: COALESCE(ct.LEAD_ORGANIZATION, ""),
            trialType: COALESCE(ct.CLINICAL_TRIAL_TYPE, ""),
            trialPrincipalInvestigator: COALESCE(ct.PRINCIPAL_INVESTIGATOR, ""),
            num_subjects: num_subjects,
            num_files: num_files,
            sites: sites
        }
    """, passThrough: true)

    trialSubjectCountByStageAtEntry(trial_id: String): [GroupCount] @cypher(statement: """
        MATCH (ct:CLINICALTRIAL {CLINICAL_TRIAL_ID: $trial_id})<--(s:SUBJECT)<--(e:ENROLLMENT)
        RETURN{
            group: e.DISEAS_STG,
            subjects: COUNT(*)
        } 
    """, passThrough: true)

    siteSubjectCountByStageAtEntry(site_id: String): [GroupCount] @cypher(statement: """
        MATCH (st:SITE {REG_INST_ID: $site_id})<--(s:SUBJECT)<--(e:ENROLLMENT)
        RETURN{
            group: e.DISEAS_STG,
            subjects: COUNT(*)
        }
    """, passThrough: true)

    siteDetail(site_id: String): SiteDetail @cypher(statement: """
        MATCH (site:SITE {REG_INST_ID: $site_id})
        OPTIONAL MATCH (site)<--(s:SUBJECT)<--(f:FILE)
        WITH 
            COUNT(DISTINCT s) AS num_subjects, 
            COUNT(DISTINCT f) AS num_files
        MATCH (site:SITE {REG_INST_ID: $site_id})
        OPTIONAL MATCH (site)<--(s:SUBJECT)
        OPTIONAL MATCH (s)<--(f:FILE)
        WITH site, num_subjects, num_files,
            COLLECT(DISTINCT s{
                    subject_id: COALESCE(s.PT_ID, ""),
                    race: COALESCE(s.PT_RACE_CD_1, ""),
                    diseaseTerm: COALESCE(s.DZ_DX_NM, "")
            }) AS subjects,
            COLLECT(DISTINCT {
                subject_id: COALESCE(s.PT_ID, ""),
                file_name: COALESCE(f.FILE_NAME, ""),
                file_type: COALESCE(f.FILE_TYPE, ""),
                file_description: COALESCE(f.FILE_DESCRIPTION, ""),
                file_format: COALESCE(f.FILE_FORMAT, ""),
                file_size: COALESCE(f.FILE_SIZE, ""),
                file_id: COALESCE(f.UUID, ""),
                md5sum: COALESCE(f.MD5SUM, "")
            }) AS files
        RETURN{
            site_id: COALESCE(site.REG_INST_ID, ""),
            siteName: COALESCE(site.REG_INST_ID_CD, ""),
            siteAddress: COALESCE(site.LOCATION, ""),
            siteContact: COALESCE(site.CONTACT, ""),
            sitePhone: COALESCE(site.PHONE, ""),
            siteEmail: COALESCE(site.EMAIL, ""),
            siteStatus: COALESCE(site.STATUS, ""),
            subjects: subjects,
            num_subjects: num_subjects,
            num_files: num_files,
            files: files
        }
    """, passThrough: true)

    sitesInfo: [SiteDetail] @cypher(statement: """
        MATCH (site:SITE)
        OPTIONAL MATCH (site)<--(s:SUBJECT)
        RETURN {
            site_id: COALESCE(site.REG_INST_ID, ""),
            siteName: COALESCE(site.REG_INST_ID_CD, ""),
            siteAddress: COALESCE(site.LOCATION, ""),
            siteStatus: COALESCE(site.STATUS, ""),
            num_subjects: COUNT(DISTINCT s)
        }
    """, passThrough: true)
}